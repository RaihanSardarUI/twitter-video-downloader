---
// No server-side variables needed
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<title>Twitter Video Downloader</title>
		<meta name="description" content="Download videos from Twitter/X easily and quickly" />
	</head>
	<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
		<div class="container mx-auto px-4 py-8">
			<!-- Header -->
			<div class="text-center mb-12">
				<h1 class="text-4xl md:text-6xl font-bold text-gray-800 mb-4">
					<span class="text-twitter">Twitter</span> Video Downloader
				</h1>
				<p class="text-xl text-gray-600 max-w-2xl mx-auto">
					Download videos from Twitter/X in <span class="font-semibold text-blue-600">MP4 format only</span>. Get the best quality automatically or choose from <span class="font-semibold text-green-600">all available MP4 resolutions</span>!
				</p>
			</div>

			<!-- Main Content -->
			<div class="max-w-4xl mx-auto">
				<!-- Download Form -->
				<div class="bg-white rounded-3xl shadow-2xl p-8 md:p-12 mb-8">
					<form id="downloadForm" class="space-y-6">
						<div>
							<label for="tweetUrl" class="block text-lg font-semibold text-gray-700 mb-3">
								Tweet URL
							</label>
							<input
								type="url"
								id="tweetUrl"
								name="tweetUrl"
								placeholder="https://x.com/user/status/123456789"
								class="w-full px-6 py-4 text-lg border-2 border-gray-200 rounded-xl focus:border-twitter focus:ring-2 focus:ring-twitter/20 outline-none transition-all duration-200"
								required
							/>
						</div>
						
						<div class="space-y-4">
							<div class="flex items-center space-x-4">
								<input
									type="checkbox"
									id="adultContent"
									name="adultContent"
									class="w-5 h-5 text-twitter border-2 border-gray-300 rounded focus:ring-twitter"
								/>
								<label for="adultContent" class="text-gray-700 font-medium">
									Allow adult content
								</label>
							</div>
							
							<div class="bg-gradient-to-r from-blue-50 to-green-50 border border-blue-200 rounded-lg p-4">
								<div class="text-blue-800 text-sm space-y-2">
									<div class="flex items-center">
										<svg class="w-4 h-4 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										<strong>MP4-Only Mode:</strong> Get all available MP4 qualities only!
									</div>
									<div class="ml-6 text-xs text-gray-600">
										üé¨ MP4 format guaranteed ‚Ä¢ üèÜ Best MP4 auto-selected ‚Ä¢ üìä All MP4 options displayed ‚Ä¢ ‚ö° Universal compatibility
									</div>
								</div>
							</div>
						</div>

						<button
							type="submit"
							class="w-full bg-gradient-to-r from-twitter to-twitter-dark hover:from-twitter-dark hover:to-twitter text-white font-bold py-4 px-8 rounded-xl text-lg transition-all duration-300 transform hover:scale-105 hover:shadow-lg"
						>
							<span id="downloadBtnText">üé¨ Get All MP4 Qualities</span>
							<div id="downloadBtnLoader" class="hidden">
								<svg class="animate-spin h-5 w-5 mx-auto" viewBox="0 0 24 24">
									<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
									<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
								</svg>
							</div>
						</button>
					</form>
				</div>

				<!-- Status Messages -->
				<div id="statusMessage" class="hidden mb-8"></div>

				<!-- Download Results -->
				<div id="downloadResults" class="hidden bg-white rounded-3xl shadow-2xl p-8 md:p-12">
					<h2 class="text-2xl font-bold text-gray-800 mb-6 flex items-center">
						üé¨ MP4 Qualities Ready!
						<span class="ml-3 text-sm font-normal text-gray-500">Best MP4 + all alternatives</span>
					</h2>
					<div id="videoInfo" class="space-y-4"></div>
				</div>



				<!-- Features Section -->
				<div class="grid md:grid-cols-3 gap-8 mt-16">
					<div class="text-center">
						<div class="bg-white rounded-2xl p-8 shadow-lg hover:shadow-xl transition-shadow duration-300">
							<div class="w-16 h-16 bg-twitter/10 rounded-full flex items-center justify-center mx-auto mb-4">
								<svg class="w-8 h-8 text-twitter" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
								</svg>
							</div>
							<h3 class="text-xl font-semibold text-gray-800 mb-2">Fast Downloads</h3>
							<p class="text-gray-600">Get your videos in seconds with our optimized API</p>
						</div>
					</div>
					
					<div class="text-center">
						<div class="bg-white rounded-2xl p-8 shadow-lg hover:shadow-xl transition-shadow duration-300">
							<div class="w-16 h-16 bg-twitter/10 rounded-full flex items-center justify-center mx-auto mb-4">
								<svg class="w-8 h-8 text-twitter" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
							</div>
							<h3 class="text-xl font-semibold text-gray-800 mb-2">MP4 Only</h3>
							<p class="text-gray-600">Universal MP4 format with all available resolutions</p>
						</div>
					</div>
					
					<div class="text-center">
						<div class="bg-white rounded-2xl p-8 shadow-lg hover:shadow-xl transition-shadow duration-300">
							<div class="w-16 h-16 bg-twitter/10 rounded-full flex items-center justify-center mx-auto mb-4">
								<svg class="w-8 h-8 text-twitter" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
								</svg>
							</div>
							<h3 class="text-xl font-semibold text-gray-800 mb-2">Secure & Private</h3>
							<p class="text-gray-600">Your data is safe and never stored on our servers</p>
						</div>
					</div>
				</div>
			</div>
		</div>

		<script>
			const API_BASE_URL = import.meta.env.PUBLIC_API_BASE_URL;
			
			// Check if API_BASE_URL is defined
			if (!API_BASE_URL) {
				console.error('PUBLIC_API_BASE_URL environment variable is not set!');
				alert('Configuration error: API URL not set. Please contact the administrator.');
			}
			
			document.getElementById('downloadForm')?.addEventListener('submit', async function(e) {
				e.preventDefault();
				
				const form = e.target as HTMLFormElement;
				const tweetUrl = (form.elements.namedItem('tweetUrl') as HTMLInputElement)?.value.trim();
				const adultContent = (form.elements.namedItem('adultContent') as HTMLInputElement)?.checked;
				
				if (!tweetUrl) {
					showStatus('Please enter a valid tweet URL', 'error');
					return;
				}
				
				// Show loading state
				setLoadingState(true);
				hideResults();
				
				try {
					// Call the API with correct request format
					const response = await fetch(`${API_BASE_URL}/video/fetch`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							url: tweetUrl,
							is_adult_content: adultContent
						})
					});
					
					const data = await response.json();
					
					if (response.ok && data.success) {
						showDownloadResults(data);
						showStatus('Video found successfully!', 'success');
					} else {
						showStatus(data.message || 'Failed to fetch video. Please check the URL and try again.', 'error');
					}
				} catch (error) {
					console.error('Error:', error);
					showStatus('Network error. Please try again later.', 'error');
				} finally {
					setLoadingState(false);
				}
			});

			
			function setLoadingState(loading: boolean) {
				const btnText = document.getElementById('downloadBtnText');
				const btnLoader = document.getElementById('downloadBtnLoader');
				const submitBtn = document.querySelector('button[type="submit"]') as HTMLButtonElement;
				
				if (loading) {
					btnText?.classList.add('hidden');
					btnLoader?.classList.remove('hidden');
					if (submitBtn) {
						submitBtn.disabled = true;
						submitBtn.classList.add('opacity-75', 'cursor-not-allowed');
					}
				} else {
					btnText?.classList.remove('hidden');
					btnLoader?.classList.add('hidden');
					if (submitBtn) {
						submitBtn.disabled = false;
						submitBtn.classList.remove('opacity-75', 'cursor-not-allowed');
					}
				}
			}
			
			function showStatus(message: string, type: string) {
				const statusEl = document.getElementById('statusMessage');
				const bgColor = type === 'success' ? 'bg-green-50 border-green-200 text-green-800' : 'bg-red-50 border-red-200 text-red-800';
				
				if (statusEl) {
					statusEl.innerHTML = `
						<div class="border-2 ${bgColor} rounded-xl p-4">
							<p class="font-medium">${message}</p>
						</div>
					`;
					statusEl.classList.remove('hidden');
					
					// Auto-hide success messages after 5 seconds
					if (type === 'success') {
						setTimeout(() => {
							statusEl.classList.add('hidden');
						}, 5000);
					}
				}
			}
			
			function showDownloadResults(data: any) {
				const resultsEl = document.getElementById('downloadResults');
				const videoInfoEl = document.getElementById('videoInfo');
				
				// Format file size
				const formatFileSize = (bytes: number) => {
					if (!bytes) return 'Unknown size';
					const sizes = ['Bytes', 'KB', 'MB', 'GB'];
					const i = Math.floor(Math.log(bytes) / Math.log(1024));
					return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
				};
				
				const expirationDate = new Date(data.expires_at * 1000).toLocaleString();
				
				// Filter for MP4 formats only
				const mp4Qualities = data.available_qualities ? 
					data.available_qualities.filter((quality: any) => {
						const format = (quality.format || quality.ext || '').toLowerCase();
						return format === 'mp4' || format === '' || !format; // Include if MP4 or unknown (assuming MP4)
					}) : [];
				
				// Build MP4 qualities section
				let qualitiesHtml = '';
				if (mp4Qualities.length > 0) {
					qualitiesHtml = `
						<div class="mt-6">
							<h4 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
								üé¨ MP4 Quality Options (${mp4Qualities.length})
								<span class="ml-2 text-sm text-gray-500 font-normal">All formats optimized for compatibility</span>
							</h4>
							<div class="grid gap-3">
								${mp4Qualities.map((quality: any, index: number) => `
									<div class="border ${index === 0 ? 'border-green-400 bg-green-50' : 'border-gray-200 bg-white'} rounded-lg p-4">
										<div class="flex items-center justify-between mb-2">
											<div class="flex items-center space-x-3">
												${index === 0 ? '<div class="text-green-600 font-bold text-sm">üèÜ BEST MP4</div>' : ''}
												<div class="font-semibold text-gray-800">${quality.quality || quality.resolution || 'Unknown'}</div>
												<div class="text-sm text-blue-600 font-medium">MP4</div>
											</div>
											<div class="text-sm text-gray-500">${formatFileSize(quality.filesize || quality.file_size)}</div>
										</div>
										<div class="flex items-center justify-between">
											<div class="text-xs text-gray-500 space-x-4">
												${quality.bitrate ? `<span>üìà ${quality.bitrate} kbps</span>` : ''}
												${quality.fps ? `<span>üéØ ${quality.fps} fps</span>` : ''}
												${quality.vbr ? `<span>üìπ ${quality.vbr} kbps</span>` : ''}
												${quality.abr ? `<span>üîä ${quality.abr} kbps audio</span>` : ''}
											</div>
											<div class="flex space-x-2">
												<a href="${quality.url}" download="${quality.filename || data.filename}" 
													 class="text-xs bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded transition-colors">
													üì• Download MP4
												</a>
												<a href="${quality.url}" target="_blank" 
													 class="text-xs bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded transition-colors">
													üîó Open
												</a>
											</div>
										</div>
									</div>
								`).join('')}
							</div>
						</div>
					`;
				} else if (data.available_qualities && data.available_qualities.length > 0) {
					// Show message if no MP4 formats found but other formats exist
					qualitiesHtml = `
						<div class="mt-6">
							<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
								<div class="flex items-center text-yellow-800">
									<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.190 2.5 1.732 2.5z"></path>
									</svg>
									<div>
										<p class="font-medium">No MP4 formats found</p>
										<p class="text-sm">Only other video formats are available for this tweet.</p>
									</div>
								</div>
							</div>
						</div>
					`;
				}
				
				const html = `
					<div class="border-2 border-gray-200 rounded-xl p-6 mb-6">
						<div class="flex items-start space-x-4 mb-4">
							${data.thumbnail ? `<img src="${data.thumbnail}" alt="Video thumbnail" class="w-20 h-20 rounded-lg object-cover flex-shrink-0" />` : ''}
							<div class="flex-1">
								<h3 class="text-xl font-semibold text-gray-800 mb-2">${data.title}</h3>
								<div class="flex flex-wrap gap-4 text-sm text-gray-500">
									${data.uploader ? `<span>üë§ ${data.uploader}</span>` : ''}
									${data.duration_formatted !== 'Unknown' ? `<span>‚è±Ô∏è ${data.duration_formatted}</span>` : ''}
									${data.view_count ? `<span>üëÅÔ∏è ${data.view_count.toLocaleString()} views</span>` : ''}
									${data.like_count ? `<span>‚ù§Ô∏è ${data.like_count.toLocaleString()} likes</span>` : ''}
								</div>
							</div>
						</div>
						
						<!-- Format Analysis Stats -->
						<div class="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-4 mb-4">
							<div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
								<div><span class="font-medium">üèÜ Best Quality:</span> <span class="text-green-600 font-semibold">${data.quality}</span></div>
								<div><span class="font-medium">üìÅ Format:</span> ${data.format}</div>
								<div><span class="font-medium">üìä File Size:</span> ${formatFileSize(data.file_size)}</div>
								<div><span class="font-medium">üé¨ MP4 Options:</span> <span class="text-purple-600 font-semibold">${data.mp4_formats_found || 0}</span></div>
							</div>
							<div class="mt-3 text-xs text-gray-600 space-x-4">
								${data.total_formats_found ? `<span>üîç ${data.total_formats_found} total formats found</span>` : ''}
								<span>üéØ Smart ranking by resolution ‚Üí bitrate ‚Üí fps</span>
								<span>‚ö° ${data.content_rating}</span>
							</div>
						</div>
						
						<!-- Quick Download Best Quality -->
						<div class="flex flex-col sm:flex-row gap-4 mb-4">
							<a
								href="${data.download_url}"
								download="${data.filename}"
								class="flex-1 inline-flex items-center justify-center bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-medium py-3 px-6 rounded-lg transition-all duration-200 transform hover:scale-105"
							>
								<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
								</svg>
								üèÜ Download Best Quality (${data.quality})
							</a>
							<a
								href="${data.download_url}"
								target="_blank"
								class="inline-flex items-center justify-center bg-gray-500 hover:bg-gray-600 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200"
							>
								<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
								</svg>
								üîó Open Best Quality
							</a>
						</div>
						
						${qualitiesHtml}
						
						<div class="mt-4 text-xs text-gray-500 border-t pt-3">
							‚ö†Ô∏è All download links expire at: ${expirationDate}
						</div>
					</div>
				`;
				
				if (videoInfoEl) {
					videoInfoEl.innerHTML = html;
				}
				if (resultsEl) {
					resultsEl.classList.remove('hidden');
				}
			}
			
			function hideResults() {
				const resultsEl = document.getElementById('downloadResults');
				if (resultsEl) {
					resultsEl.classList.add('hidden');
				}
			}
		</script>
	</body>
</html>
